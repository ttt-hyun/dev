{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\r\nimport rehypeHighlight from 'rehype-highlight';\r\nimport rehypePrism from 'rehype-prism-plus';\r\nimport rehypePrettyCode from 'rehype-pretty-code';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport remarkGfm from 'remark-gfm';\r\nimport { visit } from \"unist-util-visit\";\r\n\r\n/** @type {import('contentlayer/source-files').ComputedFields} */\r\nconst computedFields = {\r\n    slug: {\r\n        type: 'string',\r\n        resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n    },\r\n    slugAsParams : {\r\n        type: 'string',\r\n        resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\r\n    },\r\n}\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n    name: 'Doc',\r\n    filePathPattern: `post/**/*.mdx`,\r\n    contentType: 'mdx',\r\n    fields: {\r\n        title: {\r\n            type: 'string',\r\n            required: true,\r\n        },\r\n        description: {\r\n            type: 'string',\r\n            required: true,\r\n        },\r\n        date: {\r\n            type: 'date',\r\n            required: true,\r\n        },\r\n        published: {\r\n            type: 'boolean',\r\n            default: true,\r\n        }\r\n    },\r\n    computedFields,\r\n}))\r\n\r\nexport default makeSource({\r\n    contentDirPath: 'src/content',\r\n    documentTypes: [Doc],\r\n    mdx: {\r\n        remarkPlugins: [remarkGfm],\r\n        rehypePlugins: [\r\n            () => (tree) => {\r\n                visit(tree, (node) => {\r\n                    if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n                    const [codeEl] = node.children;\r\n            \r\n                    if (codeEl.tagName !== \"code\") return;\r\n            \r\n                    node.raw = codeEl.children?.[0].value;\r\n                    }\r\n                });\r\n            },\r\n            rehypeSlug,\r\n            [\r\n                rehypePrettyCode,\r\n                {\r\n                    theme: \"one-dark-pro\"\r\n                }\r\n            ],\r\n            () => (tree) => {\r\n                visit(tree, (node) => {\r\n                    if (node?.type === \"element\" && node?.tagName === \"figure\") {\r\n                        if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\r\n                            return;\r\n                        }\r\n                \r\n                        for (const child of node.children) {\r\n                            if (child.tagName === \"pre\") {\r\n                                child.properties[\"raw\"] = node.raw;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            [\r\n                rehypeAutolinkHeadings,\r\n                {\r\n                    properties: {\r\n                        className: ['subheading-anchor'],\r\n                        ariaLabel: 'link to section',\r\n                    }\r\n                }\r\n            ]\r\n        ]\r\n    }\r\n})\r\n\r\n// export default makeSource({\r\n//     contentDirPath: 'src/content',\r\n//     documentTypes: [Doc],\r\n//     mdx: {\r\n//         remarkPlugins: [remarkGfm],\r\n//         rehypePlugins: [\r\n//             rehypeSlug,\r\n//             rehypeHighlight,\r\n//             rehypePrism,\r\n//             [\r\n//                 rehypeAutolinkHeadings,\r\n//                 {\r\n//                     properties: {\r\n//                         className: ['subheading-anchor'],\r\n//                         ariaLabel: 'link to section',\r\n//                     }\r\n//                 }\r\n//             ]\r\n//         ]\r\n//     }\r\n// })"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,qBAAqB;AAC5B,OAAO,iBAAiB;AACxB,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,eAAe;AACtB,SAAS,aAAa;AAGtB,IAAM,iBAAiB;AAAA,EACnB,MAAM;AAAA,IACF,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAChD;AAAA,EACA,cAAe;AAAA,IACX,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACzE;AACJ;AAEO,IAAM,MAAM,mBAAmB,OAAO;AAAA,EACzC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,WAAW;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA;AACJ,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,GAAG;AAAA,EACnB,KAAK;AAAA,IACD,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACX,MAAM,CAAC,SAAS;AACZ,cAAM,MAAM,CAAC,SAAS;AAClB,cAAI,MAAM,SAAS,aAAa,MAAM,YAAY,OAAO;AACzD,kBAAM,CAAC,MAAM,IAAI,KAAK;AAEtB,gBAAI,OAAO,YAAY;AAAQ;AAE/B,iBAAK,MAAM,OAAO,WAAW,CAAC,EAAE;AAAA,UAChC;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,MACA,MAAM,CAAC,SAAS;AACZ,cAAM,MAAM,CAAC,SAAS;AAClB,cAAI,MAAM,SAAS,aAAa,MAAM,YAAY,UAAU;AACxD,gBAAI,EAAE,sCAAsC,KAAK,aAAa;AAC1D;AAAA,YACJ;AAEA,uBAAW,SAAS,KAAK,UAAU;AAC/B,kBAAI,MAAM,YAAY,OAAO;AACzB,sBAAM,WAAW,KAAK,IAAI,KAAK;AAAA,cACnC;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,UACI,YAAY;AAAA,YACR,WAAW,CAAC,mBAAmB;AAAA,YAC/B,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;",
  "names": []
}
